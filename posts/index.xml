<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title> YONEHUB | クラウドエンジニアの雑記 </title>
        <link> https://yonehub.y10e.com/</link>
        <description>Recent content in Posts  on YONEHUB</description>
        <generator>Hugo -- gohugo.io</generator>
        
            <language>ja</language>
        
        
        
            <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        
        
            <lastBuildDate>Wed, 27 Nov 2019 12:47:23 +0900</lastBuildDate>
        
        <atom:link href="https://yonehub.y10e.com/posts/" rel="self" type="application/rss+xml" />
        
            <item>
                <title>Azure Kubernetes Service(AKS)で Dapr を動かす（Setup編）</title>
                <link>https://yonehub.y10e.com/2019/11/27/20191127_dapr_aks_setup/</link>
                <pubDate>Wed, 27 Nov 2019 12:47:23 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/11/27/20191127_dapr_aks_setup/</guid>
                <description>

&lt;p&gt;先日、&lt;a href=&#34;../../../../2019/11/16/20191116_dapr/&#34;&gt;stand-alone な環境&lt;/a&gt;で dapr の動作を検証しました。
次は、Kubernetes cluster 上で dapr の動作を検証してみたいと思います。Minikube などのローカルな環境でも試すことができそうでしたが、折角なので Azure Kubernetes Service(AKS) で検証してみます。&lt;/p&gt;

&lt;h3 id=&#34;0-ドキュメント&#34;&gt;0. ドキュメント&lt;/h3&gt;

&lt;p&gt;Installing Dapr on a Kubernetes cluster &lt;br&gt;
&lt;a href=&#34;https://github.com/dapr/docs/blob/master/getting-started/environment-setup.md#installing-dapr-on-a-kubernetes-cluster&#34;&gt;https://github.com/dapr/docs/blob/master/getting-started/environment-setup.md#installing-dapr-on-a-kubernetes-cluster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set up an Azure Kubernetes Service cluster &lt;br&gt;
&lt;a href=&#34;https://github.com/dapr/docs/blob/master/getting-started/cluster/setup-aks.md&#34;&gt;https://github.com/dapr/docs/blob/master/getting-started/cluster/setup-aks.md&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-azure-kubernetes-service-aks-cluster-の作成&#34;&gt;1. Azure Kubernetes Service(AKS) Cluster の作成&lt;/h3&gt;

&lt;p&gt;前提条件として、次を作業端末にセットアップします。&lt;/p&gt;

&lt;p&gt;・Azure CLI &lt;br&gt;
・kubectl &lt;br&gt;&lt;/p&gt;

&lt;p&gt;はじめに dapr 検証環境用の AKS Cluster を &lt;a href=&#34;https://docs.microsoft.com/ja-jp/cli/azure/install-azure-cli?view=azure-cli-latest&#34;&gt;Azure CLI&lt;/a&gt; で作成します。kubectl　も前提として必要になるので、&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/aks/kubernetes-walkthrough&#34;&gt;クイック スタート:Azure CLI を使用して Azure Kubernetes Service クラスターをデプロイする&lt;/a&gt;を見ると良いかと思います。&lt;/p&gt;

&lt;p&gt;インストール後に次のコマンドを実行していきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Azure への接続&lt;/span&gt;
az login

&lt;span class=&#34;c1&#34;&gt;# サブスクリプションの選択&lt;/span&gt;
az account &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -s &amp;lt;YourSubscriptionId&amp;gt;

&lt;span class=&#34;c1&#34;&gt;# リソースグループの作成&lt;/span&gt;
az group create --name myAKSdapr --location japaneast

&lt;span class=&#34;c1&#34;&gt;# AKS クラスタの作成（k8sは、1.13.x 以上を使用する必要があるので必要に応じて--kubernetes-versionで指定する）&lt;/span&gt;
az aks create --resource-group myAKSdapr &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --name myAKSDaprCluster &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --node-count &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --enable-addons http_application_routing
    --enable-rbac &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --generate-ssh-keys

&lt;span class=&#34;c1&#34;&gt;# クラスタの資格情報を取得する&lt;/span&gt;
az aks get-credentials --resource-group myAKSdapr --name myAKSDaprCluster&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;なお、&lt;a href=&#34;https://github.com/helm/helm/issues/6374#issuecomment-537185486&#34;&gt;k8s のバージョン 1.6.x で helm 2.15.0 以下が動作しない&lt;/a&gt;という問題があるようなので、この後 dapr を helm でインストールする際は、kubernetes のバージョンに注意した方が良いです。&lt;/p&gt;

&lt;p&gt;一応、クラスタ作成後に kubectl get node で確認しておきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ kubectl get node
NAME                                STATUS   ROLES   AGE     VERSION
aks-nodepool1-37284717-vmss000000   Ready    agent   5m39s   v1.13.12
aks-nodepool1-37284717-vmss000001   Ready    agent   5m51s   v1.13.12&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;2-dapr-cli-のインストール&#34;&gt;2. Dapr CLI　のインストール&lt;/h3&gt;

&lt;p&gt;今回の作業端末は、Mac ではなく Visual Studio Code の Remote Deployment で接続した　Ubuntu 環境のため、Dapr CLI をインストールする。
ちなみに、Mac 用の　dapr CLI のインストールは、&lt;a href=&#34;../../../../2019/11/16/20191116_dapr/&#34;&gt;前回&lt;/a&gt;を参照してください。&lt;br&gt;
次のコマンドで最新の dapr cli が、/usr/local/bin にインストールされる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;wget -q https://raw.githubusercontent.com/dapr/cli/master/install/install.sh -O - | /bin/bash
Your system is linux_amd64
Installing Dapr CLI...

Downloading https://github.com/dapr/cli/releases/download/v0.2.0/dapr_linux_amd64.tar.gz ...
dapr installed into /usr/local/bin successfully.
cli version: 0.2.0 
runtime version: n/a
To get started with Dapr, please visit https://github.com/dapr/docs/tree/master/getting-started&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;3-aks-クラスタに-dapr-をインストールする&#34;&gt;3. AKS クラスタに dapr をインストールする&lt;/h3&gt;

&lt;p&gt;次のコマンドで、AKS クラスタに dapr をインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ dapr init --kubernetes
⌛  Making the jump to hyperspace...
ℹ️  Note: this installation is recommended for testing purposes. For production environments, please use Helm 

✅  Deploying the Dapr Operator to your cluster...
✅  Success! Dapr has been installed. To verify, run &amp;#39;kubectl get pods -w&amp;#39; in your terminal&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上記の通りインストールが正常に完了した後に、kubectl get pods で pod を確認すると、dapr関連の pod (dapr-operator, dapr-placement, dapr-sidecar-injector) が表示される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ kubectl get pods -w
NAME                                     READY   STATUS    RESTARTS   AGE
dapr-operator-68f7dcb454-nv25m           1/1     Running   0          70s
dapr-placement-6d77d54dc6-5bsp4          1/1     Running   0          70s
dapr-sidecar-injector-86d6ccf956-5j56p   1/1     Running   0          70s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;この時、この pod は、default の namespace に作成されるが、helm を使ってインストールすることで、任意の namespace 配下に作成ができる。
アンインストールしたいときは、次のコマンドを実行します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;dapr uninstall --kubernetes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;先ほどの 3 つの pod が Terminating になっていくことがわかります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;kubectl get pods
NAME                                     READY   STATUS        RESTARTS   AGE
dapr-operator-68f7dcb454-nv25m           0/1     Terminating   0          22m
dapr-placement-6d77d54dc6-5bsp4          0/1     Terminating   0          22m
dapr-sidecar-injector-86d6ccf956-5j56p   0/1     Terminating   0          22m&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
            </item>
        
            <item>
                <title>Microsoft Ignite 2019 で発表された新機能のまとめ(Network編)</title>
                <link>https://yonehub.y10e.com/2019/11/21/20191121_ignite2019_network/</link>
                <pubDate>Thu, 21 Nov 2019 06:48:00 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/11/21/20191121_ignite2019_network/</guid>
                <description>

&lt;p&gt;Microsoft Ignite 2019 の Network 系サービスの update まとめです。
4つのカテゴリに分けて各種サービスの update が紹介されていました。&lt;/p&gt;

&lt;p&gt;・Connect &amp;amp; Extend&lt;br&gt;
・Protect&lt;br&gt;
・Deliver&lt;br&gt;
・Monitoring&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ネットワークサービスは、難しいですね。機能ごとのセッションを追いきれなかったので、補足とかある人は &lt;a href=&#34;https://twitter.com/y10exxx&#34;&gt;twitter&lt;/a&gt; とかでご教示いただきたいなぁ。&lt;/p&gt;

&lt;h2 id=&#34;1-connect-extend&#34;&gt;1. Connect &amp;amp; Extend&lt;/h2&gt;

&lt;h3 id=&#34;azure-peering-service-preview&#34;&gt;Azure Peering Service (Preview)&lt;/h3&gt;

&lt;p&gt;ISP を介してパブリックネットワーク経由で Microsoftクラウド(Office 365、Dynamics 365、Azure など)に最適かつ信頼性の高いルーティングを提供するサービスです。
専用接続を使用して、Microsoftクラウドにセキュアなネットワーク接続をおこなうサービスとしては、Azure ExpressRoute　がありましたが、Peering Service では、プライベート回線ではなくパブリックネットワークが利用されます。&lt;br&gt;
日本でも、NTT コミュニケーションズや IIJ が早くも対応サービスを公表していました。&lt;/p&gt;

&lt;p&gt;Azure Peering Service&lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/peering-service/&#34;&gt;https://docs.microsoft.com/ja-jp/azure/peering-service/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;azure-virtual-wan&#34;&gt;Azure Virtual WAN&lt;/h3&gt;

&lt;p&gt;Azure Virtual WAN は、Azureを介して拠点間接続を行うことができる大規模拠点間接続サービスです。
Ignite 2019 では、プレビューだった　ExpressRoute と P2S VPN　接続との統合が一般提供となりました。&lt;/p&gt;

&lt;p&gt;Azure Firewall や Azure Virtual WAN に存在する各リージョンのハブとハブの間で接続させる機能についてのプレビュー開始が紹介されていました。&lt;/p&gt;

&lt;p&gt;それに伴い公式ドキュメントも更新されているようです。&lt;/p&gt;

&lt;p&gt;Azure Virtual WAN の概要&lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/virtual-wan/virtual-wan-about&#34;&gt;https://docs.microsoft.com/ja-jp/azure/virtual-wan/virtual-wan-about&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;expressroute&#34;&gt;ExpressRoute&lt;/h3&gt;

&lt;p&gt;オンプレミスからのネットワークトラフィックを Azure 上の仮想ネットワークゲートウェイをバイパスできる FastPath のオプションが GA になりました&lt;/p&gt;

&lt;p&gt;ExpressRoute 仮想ネットワーク ゲートウェイと FastPath&lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/expressroute/expressroute-about-virtual-network-gateways#fastpath&#34;&gt;https://docs.microsoft.com/ja-jp/azure/expressroute/expressroute-about-virtual-network-gateways#fastpath&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、ExpressRoute Direct で使用できる ExpressRoute Local が GA になったようです。
ExpressRoute Local では、アクセス可能なリージョンが限定されていますが、データ転送料金などが追加で発生ない SKU らしいです。ただ、ExpressRoute Global Reachも使えないみたいですね。&lt;/p&gt;

&lt;p&gt;ExpressRoute Local&lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/expressroute/expressroute-faqs#expressroute-local&#34;&gt;https://docs.microsoft.com/ja-jp/azure/expressroute/expressroute-faqs#expressroute-local&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ネットワークデバイスと Microsoft のネットワーク デバイスの間の物理リンクと MACSec(Media Access Control Security)で暗号化する機能がプレビューで紹介されていました。ExpressRoute Direct のみ利用可能のようです。&lt;/p&gt;

&lt;p&gt;MACsec によるポイントツーポイント暗号化に関する FAQ &lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/expressroute/expressroute-about-encryption#point-to-point-encryption-by-macsec-faq&#34;&gt;https://docs.microsoft.com/ja-jp/azure/expressroute/expressroute-about-encryption#point-to-point-encryption-by-macsec-faq&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;expressroute-for-satellites-ga&#34;&gt;ExpressRoute for satellites (GA)&lt;/h3&gt;

&lt;p&gt;衛星接続とExpressRouteを通じてMicrosoft サービスに接続できる&lt;a href=&#34;https://azure.microsoft.com/de-de/updates/azure-expressroute-for-satellites-is-now-available/&#34;&gt;Azure ExpressRoute for satellites&lt;/a&gt; が GA となりました。&lt;/p&gt;

&lt;p&gt;Satellite connectivity expands reach of Azure ExpressRoute across the globe &lt;br&gt;
&lt;a href=&#34;https://azure.microsoft.com/en-us/blog/satellite-connectivity-expands-reach-of-azure-expressroute-across-the-globe/&#34;&gt;https://azure.microsoft.com/en-us/blog/satellite-connectivity-expands-reach-of-azure-expressroute-across-the-globe/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;vpn&#34;&gt;VPN&lt;/h3&gt;

&lt;p&gt;S2S 接続では、10Gbpsの帯域の Gateway タイプと、全ての Gateway タイプでIKEv1とIKEv2のサポートがGAになったようです。
VPN Gateway でのパケットパキャプチャ採取も開発しているらしいです。これは早く GA なってほしいですね。&lt;/p&gt;

&lt;p&gt;P2S 接続では、Azure ADと多要素認証のサポート、Windows アプリの Azure VPN Clinetを開発しているみたいです。&lt;/p&gt;

&lt;h3 id=&#34;ipv6-in-azure-vnets&#34;&gt;IPv6 in Azure VNETs&lt;/h3&gt;

&lt;p&gt;Azure の仮想ネットワーク内で、IPv4 と IPv6 の両方がサポートされるようになりました。GA らしいです。
ただ、ドキュメントはまだ更新されていないので、今後反映されていくものと思われます。&lt;/p&gt;

&lt;p&gt;What is IPv6 for Azure Virtual Network? (Preview)&lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-network/ipv6-overview&#34;&gt;https://docs.microsoft.com/en-us/azure/virtual-network/ipv6-overview&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-protect&#34;&gt;2. Protect&lt;/h2&gt;

&lt;h3 id=&#34;azure-private-link-preview&#34;&gt;Azure Private Link (Preview)&lt;/h3&gt;

&lt;p&gt;Azure Private Link が、プレビューで公開されました。Azure Storage や SQL、Cosmos DB などの PaaS リソースに対して、仮想ネットワーク内のプライベート IP を経由して接続できる機能になります。&lt;/p&gt;

&lt;p&gt;Azure Private Link &lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/private-link/&#34;&gt;https://docs.microsoft.com/ja-jp/azure/private-link/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;azure-firewall-manager-preview&#34;&gt;Azure Firewall Manager (Preview)&lt;/h3&gt;

&lt;p&gt;Azure Firewall Manager という機能がプレビューで公開されました。
リージョンやサブスクリプションをまたがる複数のAzure Firewall インスタンスを一元的にセキュリティポリシーを展開、管理できるみたいです。&lt;/p&gt;

&lt;p&gt;Azure Firewall Manager is now in preview &lt;br&gt;
&lt;a href=&#34;https://azure.microsoft.com/ja-jp/updates/azure-firewall-manager-is-now-in-preview/&#34;&gt;https://azure.microsoft.com/ja-jp/updates/azure-firewall-manager-is-now-in-preview/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;azure-bastion&#34;&gt;Azure Bastion&lt;/h3&gt;

&lt;p&gt;JumpBox の PaaS のような、サーバーをもたずに仮想ネットワークから Azure VM に RDP や SSH ができるようになる Azure Bastion が GA になりました。
プレビューから GA まで早かったですね。　&lt;/p&gt;

&lt;p&gt;Azure Bastion とは&lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/bastion/bastion-overview&#34;&gt;https://docs.microsoft.com/ja-jp/azure/bastion/bastion-overview&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;azure-waf&#34;&gt;Azure WAF&lt;/h3&gt;

&lt;p&gt;Azure Front Door や Azure Application Gateway と統合した WAF サービスになったという話でした。(updateなのか？)URIなどで WAF ポリシーをカスタマイズできたり地理レベルでフィルタリングを適用したりするような機能が開発中らしいです。&lt;/p&gt;

&lt;h2 id=&#34;3-deliver&#34;&gt;3. Deliver&lt;/h2&gt;

&lt;h3 id=&#34;application-gateway&#34;&gt;Application Gateway&lt;/h3&gt;

&lt;p&gt;Application Gateway のところで発表するの？って感じでしたが、AKS の Application Gateway Ingres Controleer が GA しました。&lt;br&gt;
他には、Application GatewayとAzure Keyvaltが統合され、SSL 証明書を管理する機能がGAになりました。レイテンシやバックエンドのエラーコードなどメトリックも拡充したらしいです。&lt;/p&gt;

&lt;p&gt;Comming Soonとしては、リスナーにワイルドカードが許容されるようになりサブドメインごとにリスナー作成が不要になる Wildcard listener が開発中らしいです。&lt;/p&gt;

&lt;h3 id=&#34;azure-front-door&#34;&gt;Azure Front Door&lt;/h3&gt;

&lt;p&gt;内部動作の update のようでしたが、HTTPパフォーマンスが向上したり、DDos対策などでセキュリティ性も向上しているようです。&lt;/p&gt;

&lt;h3 id=&#34;azure-cdn&#34;&gt;Azure CDN&lt;/h3&gt;

&lt;p&gt;Azure Storage や VM、Media Serviceから Microsoftの Azure CDN　のエグレストラフィックは無料になりました。
CDN ルールのカスタマイズ性や容易さを向上できるように開発を進めているとのこと。&lt;/p&gt;

&lt;h2 id=&#34;4-monitoring&#34;&gt;4. Monitoring&lt;/h2&gt;

&lt;h3 id=&#34;internet-analyzer-preview&#34;&gt;Internet Analyzer(Preview)&lt;/h3&gt;

&lt;p&gt;Azure Internet Analyzerがプレビューで公開されました。次のようなことができるらしい。&lt;/p&gt;

&lt;p&gt;・web アプリをクラウドに移行した時のインパクト計測&lt;br&gt;
・Azure Front DoorやCDNを使用したときのパフォーマンス影響の計測&lt;br&gt;
・2種類のweb appやマルチリージョンのアプリを配置したときのパフォーマンスなどを計測&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Internet Analyzer&lt;br&gt;
&lt;a href=&#34;https://azure.microsoft.com/ja-jp/services/internet-analyzer/&#34;&gt;https://azure.microsoft.com/ja-jp/services/internet-analyzer/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;azure-monitor-for-networks&#34;&gt;Azure Monitor for networks&lt;/h3&gt;

&lt;p&gt;ネットワーク周りのモニタリング、メトリック計測などが向上、拡充したそうです。
Traffic 分析の処理速度向上やロードバランサーやグローバルピアリング、UDRなどの接続性チェックが向上が挙げられていました。&lt;/p&gt;

&lt;p&gt;今後としては、クラウドネットワーク全体の正常性を確認できるコンソールやエージェント、設定レスな機能の開発を進めているらしいです。　&lt;/p&gt;
</description>
            </item>
        
            <item>
                <title> Windows 7、Windows Server 2008/R2 の延長セキュリティ更新プログラムを入手する方法</title>
                <link>https://yonehub.y10e.com/2019/11/20/20191120_windows_eos/</link>
                <pubDate>Wed, 20 Nov 2019 20:47:23 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/11/20/20191120_windows_eos/</guid>
                <description>&lt;p&gt;Windows Server 2008 および 2008 R2 の延長サポートは、2020 年 1 月 14 日に終了しますが、オンプレミス環境で追加の料金を支払うことで 3 年間の延長セキュリティ更新プログラム(ESU)を利用できるオプションが昨年公開されました。また、Windows Server 2008 および 2008 R2のワークロードを Azure に移行すると、この ESU を無償で利用できるということで話題になりました。&lt;/p&gt;

&lt;p&gt;このオプションについての概要や全体的な Azure への移行などについては、&lt;a href=&#34;https://blogs.technet.microsoft.com/mssvrpmj/2018/12/13/new-options-for-sql-server-2008-and-windows-server-2008-end-of-support/&#34;&gt;SQL Server 2008 および Windows Server 2008 のサポートを延長するオプションについて&lt;/a&gt;などで説明がありましたが、オンプレミスや Azure への移行後にどのようにして ESU を入手するかについては長らく公式情報の公開待ちのステータスになっておりました。&lt;/p&gt;

&lt;p&gt;ですが、先日公式に ESU の入手手順と条件についての公開情報に更新がありました。&lt;/p&gt;

&lt;p&gt;対象の Windows デバイスの延長セキュリティ更新プログラムを入手する方法
&lt;a href=&#34;https://blogs.windows.com/japan/2019/10/25/how-to-get-extended-security-updates-for-eligible-windows/#pWeZBtTMXeUqUKAp.97&#34;&gt;https://blogs.windows.com/japan/2019/10/25/how-to-get-extended-security-updates-for-eligible-windows/#pWeZBtTMXeUqUKAp.97&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文（英語）；How to get Extended Security Updates for eligible Windows devices
&lt;a href=&#34;https://techcommunity.microsoft.com/t5/Windows-IT-Pro-Blog/How-to-get-Extended-Security-Updates-for-eligible-Windows/ba-p/917807&#34;&gt;https://techcommunity.microsoft.com/t5/Windows-IT-Pro-Blog/How-to-get-Extended-Security-Updates-for-eligible-Windows/ba-p/917807&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前半はオンプレミスでESUを入手する手順についてですが、Azure あるいは Azure Stack　に関する記述は以下となります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Azure Virtual Machines (VM)、Windows Virtual Desktop の Windows 7 ESU、Azure 上で Windows 7/Windows Server 2008/Windows Server 2008 R2 の Bring your own image (イメージ持ち込み) を利用する場合には、追加の ESU キーを展開する必要はありません。オンプレミス デバイスと同様に、これらのデバイスにも KB4516033 および KB4519972 に記載されている SSU (またはそれ以降の SSU/ロールアップ) をインストールする必要があります。パッチ適用済みの Windows 7 イメージとパッチ適用済みの Windows Server 2008 R2 SP1 イメージは Azure Marketplace から入手できます。Azure Stack VM または Azure VMware Solution の場合、オンプレミス デバイスと同じ手順を踏む必要があります。&lt;/p&gt;

&lt;p&gt;You do not need to deploy an additional ESU key for Azure virtual machines (VMs), Windows 7 ESU with Windows Virtual Desktop, or for bring-your-own images on Azure for Windows 7, Windows Server 2008, and Windows Server 2008 R2. Like on-premises devices, these devices will also require the installation of the SSUs and monthly rollups outlined in the prerequisites section above. A pre-patched Windows 7 image and a pre-patched Windows Server 2008 R2 SP1 image are available from the Azure Marketplace. Azure Stack VMs or Azure VMware solutions should follow the same process as on-premises devices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;オンプレミスから Azure に移行したWindows Server 2008/Windows Server 2008 R2 については、KB4516033 および KB4519972 に記載されている SSU (またはそれ以降の SSU/ロールアップ) をインストールしておく必要があります。&lt;/p&gt;

&lt;p&gt;Windows Server 2008 と 2008 R2　の延長セキュリティ更新プログラムについては、FAQも用意されています。&lt;/p&gt;

&lt;p&gt;拡張セキュリティ更新プログラムのよくある質問 (FAQ)&lt;br&gt;
&lt;a href=&#34;https://www.microsoft.com/ja-jp/cloud-platform/extended-security-updates&#34;&gt;https://www.microsoft.com/ja-jp/cloud-platform/extended-security-updates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extended Security Updates frequently asked questions&lt;br&gt;
&lt;a href=&#34;https://www.microsoft.com/en-us/cloud-platform/extended-security-updates&#34;&gt;https://www.microsoft.com/en-us/cloud-platform/extended-security-updates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ESUは、Windows Update や WSUSなどの通常のパッチ管理ソリューションを通じて提供されるので、上記の前提条件を満たすことで、Windows Update や WSUS を通じて無償で Azure VM へ適用することができるようです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How and when will Microsoft deliver Extended Security Updates?&lt;br&gt;
Customers can deploy the new ESU Key and any pre-requisite servicing stack updates to the applicable machines, then continue with their current update/servicing strategy to deploy Extended Security Updates through Windows Update, Windows Server Update Services (WSUS), or whatever patch management solution the customer prefers. This is also the process that customers will need to follow for Azure Stack.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
            </item>
        
            <item>
                <title>Microsoftのマイクロサービス構築フレームワーク Dapr を動かす</title>
                <link>https://yonehub.y10e.com/2019/11/16/20191116_dapr/</link>
                <pubDate>Sat, 16 Nov 2019 12:47:23 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/11/16/20191116_dapr/</guid>
                <description>

&lt;p&gt;2019年10月にマイクロサービスアプリケーションの開発を容易にするためのフレームワークとして&amp;rdquo;Dapr&amp;rdquo;がマイクロソフトから公開されました。現在α版となっています。
Daprは、プログラミング言語に依存せずマイクロサービス間の呼び出し機能やステート管理、サービス間のメッセージ機能、リソースのバインディング、　分散サービス間のトレーシングなどの機能を提供するソフトウェアです。
マイクロサービスに直接組み込むのではなく、HTTP/gRPC API経由で呼び出して利用することで、アプリケーションに依存せず利用できることを目指しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://yonehub.y10e.com/img/20191116_dapr/dapr_conceptual_model.jpg&#34; align=&#34;left&#34;&gt;&lt;br clear=&#34;left&#34;&gt;&lt;/p&gt;

&lt;p&gt;ローカルでインストールし動作を試して見ました。&lt;/p&gt;

&lt;h3 id=&#34;1-ドキュメント&#34;&gt;1. ドキュメント&lt;/h3&gt;

&lt;p&gt;Dapr 公式&lt;br&gt;
&lt;a href=&#34;https://dapr.io/#&#34;&gt;https://dapr.io/#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dapr github&lt;br&gt;
&lt;a href=&#34;https://github.com/dapr/docs&#34;&gt;https://github.com/dapr/docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Roadmap&lt;br&gt;
&lt;a href=&#34;https://github.com/dapr/dapr/wiki/Roadmap&#34;&gt;https://github.com/dapr/dapr/wiki/Roadmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;0.2.0 Release Milestone&lt;br&gt;
&lt;a href=&#34;https://github.com/orgs/dapr/projects/8&#34;&gt;https://github.com/orgs/dapr/projects/8&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-インストール-mac&#34;&gt;2. インストール(Mac)&lt;/h3&gt;

&lt;p&gt;Dapr CLIをインストールする&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ curl -fsSL https://raw.githubusercontent.com/dapr/cli/master/install/install.sh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; /bin/bash
Your system is darwin_amd64
Installing Dapr CLI...

Downloading https://github.com/dapr/cli/releases/download/v0.1.0/dapr_darwin_amd64.tar.gz ...
dapr installed into /usr/local/bin successfully.
cli version: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.1.0 
runtime version: n/a
To get started with Dapr, please visit https://github.com/dapr/docs/tree/master/getting-started&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;CLI を使って Dapr Runtime をインストールする。（事前にdockerを稼働させる）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ dapr init
⌛  Making the jump to hyperspace...
✅  Downloading binaries and setting up components...
✅  Success! Dapr is up and running&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;To see that Dapr has been installed successful, from a command prompt run the docker ps command and check that the daprio/dapr:latest and redis &amp;gt;container images are both running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dapr が正常にインストールされていていれば、daprio/dapr:latest と redis のコンテナイメージが見えるらしい&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                      NAMES
b5c379de74b6        daprio/dapr         &lt;span class=&#34;s2&#34;&gt;&amp;#34;./placement&amp;#34;&lt;/span&gt;            &lt;span class=&#34;m&#34;&gt;59&lt;/span&gt; seconds ago       Up &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; seconds       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0.0.0:50005-&amp;gt;50005/tcp   dapr_placement
44a1d7cb8aff        redis               &lt;span class=&#34;s2&#34;&gt;&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span&gt;   About a minute ago   Up &lt;span class=&#34;m&#34;&gt;58&lt;/span&gt; seconds       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.0.0.0:6379-&amp;gt;6379/tcp     epic_golick&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;3-サンプルコード-hello-world&#34;&gt;3. サンプルコード （Hello World）&lt;/h3&gt;

&lt;h4 id=&#34;hello-world-の解説&#34;&gt;Hello World の解説&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dapr/samples/tree/master/1.hello-world&#34;&gt;https://github.com/dapr/samples/tree/master/1.hello-world&lt;/a&gt;
&lt;img src=&#34;https://yonehub.y10e.com/img/20191116_dapr/Architecture_Diagram.png&#34; align=&#34;left&#34;&gt;&lt;br clear=&#34;left&#34;&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;まずは　git clone&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ git clone https://github.com/dapr/samples.git
$ cd samples/1.hello-world
$ ls
README.md               app.js                  img                     package-lock.json       package.json            sample.http             sample.json&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;app.js を見ていく。&lt;br&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-node&#34; data-lang=&#34;node&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-node&#34; data-lang=&#34;node&#34;&gt;const stateUrl = `http://localhost:${daprPort}/v1.0/state`;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Dapr CLI は、 Dapr port用の環境変数を作成し、デフォルトでポートは 3500 。
次に neworder ハンドラを見ていく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-node&#34; data-lang=&#34;node&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-node&#34; data-lang=&#34;node&#34;&gt;app.post(&amp;#39;/neworder&amp;#39;, (req, res) =&amp;gt; {
    const data = req.body.data;
    const orderId = data.orderId;
    console.log(&amp;#34;Got a new order! Order ID: &amp;#34; + orderId);

    const state = [{
        key: &amp;#34;order&amp;#34;,
        value: data
    }];

    fetch(stateUrl, {
        method: &amp;#34;POST&amp;#34;,
        body: JSON.stringify(state),
        headers: {
            &amp;#34;Content-Type&amp;#34;: &amp;#34;application/json&amp;#34;
        }
    }).then((response) =&amp;gt; {
        console.log((response.ok) ? &amp;#34;Successfully persisted state&amp;#34; : &amp;#34;Failed to persist state&amp;#34;);
    });

    res.status(200).send();
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;ここでは neworder メッセージを受信して処理するエンドポイントを公開している。
最初に受信したメッセージをコンソールログに記録して、次に stateUrl に state Key-Valueを POST することで　Redis にorder id を永続化する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-node&#34; data-lang=&#34;node&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-node&#34; data-lang=&#34;node&#34;&gt;app.get(&amp;#39;/order&amp;#39;, (_req, res) =&amp;gt; {
    fetch(`${stateUrl}/order`)
        .then((response) =&amp;gt; {
            return response.json();
        }).then((orders) =&amp;gt; {
            res.send(orders);
        });
});&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;この Get エンドポイントでは、Redis キャッシュが呼び出され、order keyの最新 value が取得でき、Node.js app がステートレスになる。&lt;/p&gt;

&lt;h4 id=&#34;node-js-アプリを-dapr-と稼働させてみる&#34;&gt;Node.js アプリを Dapr と稼働させてみる&lt;/h4&gt;

&lt;p&gt;まずは依存関係をインストールする&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ npm install&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Node.js app を稼働させる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ dapr run --app-id mynode --app-port &lt;span class=&#34;m&#34;&gt;3000&lt;/span&gt; --port &lt;span class=&#34;m&#34;&gt;3500&lt;/span&gt; node app.js
ℹ️  Starting Dapr with id mynode. HTTP Port: &lt;span class=&#34;m&#34;&gt;3500&lt;/span&gt;. gRPC Port: &lt;span class=&#34;m&#34;&gt;50880&lt;/span&gt;
✅  You&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;re up and running! Both Dapr and your app logs will appear here.&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;フォアグラウンドで app が動くので別のターミナルなどで curl でエンドポイントに post する。
curl 実行は samples/1.hello-world に移動しておこなう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;curl -XPOST -d @sample.json http://localhost:3500/v1.0/invoke/mynode/method/neworder&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;dapr app が稼働しているターミナルでメッセージの受信が確認できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;== APP == Got a new order! Order ID: 42
== APP == Successfully persisted state&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;GET のエンドポイントにアクセスしてステートが正常に保存されていることを確認する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ curl http://localhost:3500/v1.0/invoke/mynode/method/order
{&amp;#34;orderId&amp;#34;:&amp;#34;42&amp;#34;}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;最後に次のコマンドでサービスを終了させる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ dapr stop --app-id mynode
✅  app stopped successfully&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;dapr の状態は dapr list で確認できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ dapr list
No dapr instances found.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
            </item>
        
            <item>
                <title>Raspberry Pi用にRaspbianのインストール(Mac)</title>
                <link>https://yonehub.y10e.com/2019/11/11/20191111_raspberrypi_setup/</link>
                <pubDate>Mon, 11 Nov 2019 21:47:23 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/11/11/20191111_raspberrypi_setup/</guid>
                <description>

&lt;p&gt;Raspberry Pi 用の Micro SD カードに Raspbian をインストール手順を時間があくととすぐ忘れてしまうので手順をメモしておく。&lt;/p&gt;

&lt;h3 id=&#34;1-sdカードの選別&#34;&gt;1. SDカードの選別&lt;/h3&gt;

&lt;p&gt;基本的に SD カードのサイズは、マイクロSDカードが必要（ただし Raspberry Pi Model A およびRaspberry Pi Model B は、フル SD カード）
NOOBS、Raspbianのイメージインストールは最小推奨で 8GB 以上なので、それ以上のサイズが必要。
カードのスループットに推奨値はないみたいだが、自分は大体 Class 10 以上を使っている。&lt;/p&gt;

&lt;p&gt;SD Card
&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/sd-cards.md&#34;&gt;https://www.raspberrypi.org/documentation/installation/sd-cards.md&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-インストール方法の選択&#34;&gt;2. インストール方法の選択&lt;/h3&gt;

&lt;p&gt;NOOBS を使う方法と、Raspbian を直接イメージとして焼く方法の２種類がある。
NOOBS でも Raspbian はオフラインインストールできるみたいだが、若干 SD カードの容量を無題にするかなと思われる。
NOOBS で Ubuntuなどの Raspbian 以外の OS をインストールすることもできるがネットワーク経由になる。&lt;/p&gt;

&lt;p&gt;Raspberry Pi - Downloads
&lt;a href=&#34;https://www.raspberrypi.org/downloads/&#34;&gt;https://www.raspberrypi.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-micro-sdカードのフォーマット&#34;&gt;3. Micro SDカードのフォーマット&lt;/h3&gt;

&lt;p&gt;PC に SD カードを接続して、ディスクユーティリティを起動する。
Raspberry Pi は、FAT ファイルシステムのみサポートしているので、exFAT などは利用できません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/sdxc_formatting.md&#34;&gt;https://www.raspberrypi.org/documentation/installation/sdxc_formatting.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://yonehub.y10e.com/img/20191111_raspbian/1_diskutility.png&#34; align=&#34;left&#34;&gt;&lt;br clear=&#34;left&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-raspbian-のダウンロードと書き込み&#34;&gt;4. Raspbian のダウンロードと書き込み&lt;/h3&gt;

&lt;p&gt;Raspbian のイメージを次からダウンロードします。デスクトップ版や推奨ソフトウェア込み版などがあるので好みに応じて選びます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;https://www.raspberrypi.org/downloads/raspbian/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ターミナルを起動し、まずはzipを解凍する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ unzip &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt;-09-26-raspbian-buster.zip 
Archive:  &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt;-09-26-raspbian-buster.zip
  inflating: &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt;-09-26-raspbian-buster.img &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;SDカードのデバイス名を確認する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ df -h
/dev/disk2s1    29Gi  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.5Mi   29Gi     &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;%       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;                   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;%   /Volumes/RASPBIAN

$ diskutil list
/dev/disk0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;internal, physical&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
   &lt;span class=&#34;c1&#34;&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;
   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:      GUID_partition_scheme                        *121.3 GB   disk0
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:                        EFI EFI                     &lt;span class=&#34;m&#34;&gt;209&lt;/span&gt;.7 MB   disk0s1
   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;:                 Apple_APFS Container disk1         &lt;span class=&#34;m&#34;&gt;121&lt;/span&gt;.1 GB   disk0s2

/dev/disk1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;synthesized&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
   &lt;span class=&#34;c1&#34;&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;
   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:      APFS Container Scheme -                      +121.1 GB   disk1
                                 Physical Store disk0s2
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:                APFS Volume Macintosh HD            &lt;span class=&#34;m&#34;&gt;92&lt;/span&gt;.2 GB    disk1s1
   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;:                APFS Volume Preboot                 &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt;.6 MB    disk1s2
   &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;:                APFS Volume Recovery                &lt;span class=&#34;m&#34;&gt;519&lt;/span&gt;.3 MB   disk1s3
   &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;:                APFS Volume VM                      &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;.2 GB     disk1s4

/dev/disk2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;external, physical&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
   &lt;span class=&#34;c1&#34;&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;
   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;:     FDisk_partition_scheme                        *31.0 GB    disk2
   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:                 DOS_FAT_32 RASPBIAN                &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;.0 GB    disk2s1&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;MACでSDカードを接続すると、自動マウントされてイメージを書き込むタイミングでResource busyで怒られることになるので先にアンマウントしておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo diskutil umount /Volumes/RASPBIAN&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;dd コマンドでimgをdisk2のデバイスに書き込む。ここで disk でなく rdisk で指定した方が書き込みが早くなる点に注目。
なにやら 20 倍ほど早くなるとのこと。&lt;a href=&#34;https://superuser.com/questions/631592/why-is-dev-rdisk-about-20-times-faster-than-dev-disk-in-mac-os-x&#34;&gt;Why is “/dev/rdisk” about 20 times faster than “/dev/disk” in Mac OS X&lt;/a&gt;
イメージ書き込み待ち中暇なので調べたところ、disk と rdisk もデバイスとしては同じものを指定しているが、disk はランダムアクセス可能なデバイス、rdisk はシーケンシャルアクセスされるデバイスを意味しているらしい。
disk 指定の場合、 IO は 4KB に分割され、カーネル空間の Buffer Cache を経由してデバイスへ Read/Write されることになる。一方、rdiskはk基本的に Buffer Cache を経由せずに直接デバイスへIOとなる。
なので、dd コマンドでの書き込みのようなシーケンシャルアクセスでは、余計なオーバヘッドが発生しない rdisk 指定のアクセスが圧倒的に早いという話。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ sudo dd bs=1m if=2019-09-26-raspbian-buster.img of=/dev/rdisk2
3652+0 records in
3652+0 records out
3829399552 bytes transferred in 274.894541 secs (13930431 bytes/sec)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
            </item>
        
            <item>
                <title>Microsoft Ignite 2019 で発表された新機能のまとめ(Storage編)</title>
                <link>https://yonehub.y10e.com/2019/11/11/20191110_ignite2019_storage/</link>
                <pubDate>Mon, 11 Nov 2019 00:48:00 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/11/11/20191110_ignite2019_storage/</guid>
                <description>

&lt;p&gt;Microsoft Ignite 2019 の Storage周りの update まとめです。
公開情報がまだ十分にない preview な機能の紹介が多かった印象でした。&lt;/p&gt;

&lt;h2 id=&#34;1-azure-disk&#34;&gt;1. Azure Disk&lt;/h2&gt;

&lt;p&gt;ディスク関連の update は、 Azure VM とかぶっているのが多くあります。&lt;/p&gt;

&lt;h3 id=&#34;sap-hana-certification-on-ultra-disk-and-m-e-series-vms&#34;&gt;SAP HANA Certification on Ultra Disk and M/E series VMs&lt;/h3&gt;

&lt;p&gt;8月に GA された Ultra Disk と　M or E シリーズ VM の構成が、SAP HANA の認定を受けた。&lt;/p&gt;

&lt;p&gt;参照:&lt;a href=&#34;https://azure.microsoft.com/ja-jp/blog/announcing-the-general-availability-of-azure-ultra-disk-storage/&#34;&gt;Azure Ultra Disk Storage の一般公開に関するお知らせ&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;shared-disk-support-for-ultra-and-premium-ssd&#34;&gt;Shared Disk Support for Ultra and Premium SSD&lt;/h3&gt;

&lt;p&gt;複数の仮想マシンからディスクを共有する Azure Shared Disks のプレビューが開始されたそうです。&lt;br&gt;
プレビュー申し込みは次の Forms から。&lt;a href=&#34;http://aka.ms/SharedDiskSignUp&#34;&gt;http://aka.ms/SharedDiskSignUp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;direct-uplocad-to-managed-disk&#34;&gt;Direct uplocad to Managed Disk&lt;/h3&gt;

&lt;p&gt;オンプレから VHD を持ち込む際に以前まで一度、 Azure Storage にファイルをアップロードしてから、Managed Disk に変換する必要がありましたが、直接 Managed Disk にアップロードできるようになるプレビュー機能が紹介されていました。&lt;/p&gt;

&lt;p&gt;参照:&lt;a href=&#34;https://azure.microsoft.com/en-au/blog/introducing-the-preview-of-direct-upload-to-azure-managed-disks/&#34;&gt;Introducing the preview of direct-upload to Azure managed disks&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;better-performance-with-bursting-enhancement-and-smaller-size-offerings-on-azure-disks&#34;&gt;Better performance with bursting enhancement and smaller size offerings on Azure Disks&lt;/h3&gt;

&lt;p&gt;Premium SSD と Standard SSD で、4, 8, 16GB のオプションが追加されました。
また、Premium SSD で P20 (512　GB 以下)のディスクは、IOPS とスループット性能がバーストし、一時的に最大で30倍の性能(3500IOPS, 170MiB/s)まで引き上げることが可能なプレビュー機能が発表されました。&lt;/p&gt;

&lt;p&gt;参照:&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machines/linux/disk-bursting&#34;&gt;Premium SSD bursting&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;enabling-server-side-encryption-with-customer-managed-keys-for-azure-disks&#34;&gt;Enabling server-side encryption with customer-managed keys for Azure Disks&lt;/h3&gt;

&lt;p&gt;Managed Disks のサーバーサイド暗号化（SSE）をKeyvault上のユーザ管理のkeyで実施できるようになるプレビュー機能が発表されました。&lt;/p&gt;

&lt;p&gt;参照:&lt;a href=&#34;https://azure.microsoft.com/ja-jp/blog/preview-server-side-encryption-with-customer-managed-keys-for-azure-managed-disks/&#34;&gt;Preview: Server-side encryption with customer-managed keys for Azure Managed Disks&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;optimize-data-protection-with-incremental-snapshots-and-direct-upload-on-azure-disks&#34;&gt;Optimize data protection with incremental snapshots and direct upload on Azure Disks&lt;/h3&gt;

&lt;p&gt;Managed Diskのスナップショットは、今まで差分コピーでなく取得時点のフルコピーでしたが、差分スナップショットがプレビュー機能で発表されました。&lt;/p&gt;

&lt;p&gt;参照:&lt;a href=&#34;https://azure.microsoft.com/en-us/blog/introducing-cost-effective-increment-snapshots-of-azure-managed-disks-in-preview/&#34;&gt;Introducing cost-effective increment snapshots of Azure managed disks in preview&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-azure-files&#34;&gt;2. Azure Files&lt;/h2&gt;

&lt;h3 id=&#34;azure-backup-integration&#34;&gt;Azure Backup integration&lt;/h3&gt;

&lt;p&gt;セッションだと　very very close to announce と言っていたので、まだ一応 GA ではないようですが、もうすぐ Azure Backup と　Azure Files の統合機能が GA される予定のようです。&lt;/p&gt;

&lt;p&gt;参照:&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/backup/backup-azure-files&#34;&gt;Back up and restore Azure file shares&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;support-for-nfs-v4-1-preview&#34;&gt;Support for NFS v4.1 (Preview)&lt;/h3&gt;

&lt;p&gt;従来のSMB 2.1, 3.0, REST　でのアクセスに加えて、NFS v4.1　でのアクセスがサポートされる機能が開発中とのこと。&lt;/p&gt;

&lt;h3 id=&#34;active-directory-authentication-preview&#34;&gt;Active Directory Authentication (Preview)&lt;/h3&gt;

&lt;p&gt;2019年8月に &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/better-security-with-enhanced-access-control-experience-in-azure-files/&#34;&gt;Azure AD DSとAzure Filesの認証統合のGAがアナウンス&lt;/a&gt;されましたが、ユーザ管理の AD にジョインして認証統合させる機能が Limited Preview で開発されているみたいです。&lt;br&gt;
Survey Form　は次にあります。
&lt;a href=&#34;http://aka.ms/azurefilesADAuthPreviewSurvey&#34;&gt;http://aka.ms/azurefilesADAuthPreviewSurvey&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;cost-effective-tiers-for-secoundary-data-preview&#34;&gt;Cost-effective tiers for secoundary data (Preview)&lt;/h3&gt;

&lt;p&gt;Azure Files にも IO 頻度などに応じてコスト最適化を図れる Cool, Hot Tier機能を設ける予定があるようです。&lt;/p&gt;

&lt;h3 id=&#34;private-endpoint-preview&#34;&gt;Private Endpoint (Preview)&lt;/h3&gt;

&lt;p&gt;Azure Storage に仮想ネットワークのIP空間に private ipを割り当てる Private Endpointt が紹介されていました。&lt;/p&gt;

&lt;p&gt;参照:
&lt;a href=&#34;http://aka.ms/AzureFilesNetwork&#34;&gt;Azure Files networking considerations&lt;/a&gt;
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/storage/files/storage-files-configure-p2s-vpn-windows#create-a-private-endpoint-preview&#34;&gt;Configure a Point-to-Site (P2S) VPN on Windows for use with Azure Files&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-azure-blob&#34;&gt;3. Azure Blob&lt;/h2&gt;

&lt;h3 id=&#34;multi-protocol-access-with-blob-and-adls-gen2-api&#34;&gt;Multi protocol Access with Blob and ADLS Gen2 API&lt;/h3&gt;

&lt;p&gt;Azure Data Lake Storage Gen2 上へのデータアクセスが、BLOB　と　ADLS のどちらのエンドポイントからもアクセスできる機能が、 GA らしいです。&lt;/p&gt;

&lt;h3 id=&#34;custome-controlled-failover&#34;&gt;Custome controlled failover&lt;/h3&gt;

&lt;p&gt;GRSのマニュアルフェールオーバー機能は2019年中にGAの見込みだとか。
プレビュー公開時に、「&lt;a href=&#34;https://qiita.com/yyoneda1106/items/80387725767f4794b7bd&#34;&gt;Public PreviewになったAzureストレージのマニュアルフェイルオーバーを早速試して見た&lt;/a&gt;」で試したやつですね。&lt;/p&gt;

&lt;h3 id=&#34;reserved-capacity-with-cost-saving-ga&#34;&gt;Reserved Capacity with cost saving (GA)&lt;/h3&gt;

&lt;p&gt;Storage 容量を1年ないしは3年予約することでストレージコストの割引を受けることができる Storage Reserved Capacity が GA されたようです。
料金ページの FAQ にも説明があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/ja-jp/pricing/details/storage/data-lake/&#34;&gt;Azure Storage Reserved Capacity FAQs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;英語の予約系のコストオプションのページも英語ドキュメントは更新されているみたいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/billing/billing-save-compute-costs-reservations&#34;&gt;What are Azure Reservations?&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;nfs-v3-support-on-blob-storage&#34;&gt;NFS v3 support on Blob Storage&lt;/h3&gt;

&lt;p&gt;NFS v3　経由で Blob Storage　経由にアクセスできる機能が近くプレビュー公開される。&lt;/p&gt;

&lt;h2 id=&#34;4-others&#34;&gt;4. Others&lt;/h2&gt;

&lt;h3 id=&#34;azure-hpc-cache-generally-available&#34;&gt;Azure HPC Cache generally available&lt;/h3&gt;

&lt;p&gt;VMから Azure Blob や Azure Netapp Files の間に配置して、Cacheする Azure HPC Cache　が GA されたそうです。&lt;/p&gt;

&lt;p&gt;参照:&lt;a href=&#34;https://azure.microsoft.com/ja-jp/updates/azure-hpc-cache-is-now-available/&#34;&gt;Azure HPC Cache is now available&lt;/a&gt;&lt;/p&gt;
</description>
            </item>
        
            <item>
                <title>Microsoft Ignite 2019 で発表された新機能のまとめ(AKS/Container編)</title>
                <link>https://yonehub.y10e.com/2019/11/08/20191108_ignite2019_aks/</link>
                <pubDate>Fri, 08 Nov 2019 12:47:23 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/11/08/20191108_ignite2019_aks/</guid>
                <description>

&lt;p&gt;Microsoft Ignite 2019 で AKS / Container　関連も多く update がありました。
画期的というよりは、実用的な機能が充実してきたと思える機能が多くありました。&lt;/p&gt;

&lt;h3 id=&#34;1-threat-protection-for-azure-kubernetes-service&#34;&gt;1. Threat protection for Azure Kubernetes Service&lt;/h3&gt;

&lt;p&gt;Azure Security Centerでの、AKS クラスタを対象とした保護機能が拡大しているようです。
次の項目が挙げられていました。&lt;/p&gt;

&lt;p&gt;• Discovery &amp;amp; Visibility - サブスクリプション内のAKSインスタンスの継続的ディスカバリ&lt;br&gt;
• Recommendations - セキュリティベストプラクティスを実行を助ける項目提示&lt;br&gt;
• Threat Detection - ホストとクラスターベースの分析&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-streamlined-developer-experience-for-azure-kubernetes-service&#34;&gt;2. Streamlined developer experience for Azure Kubernetes Service&lt;/h3&gt;

&lt;p&gt;Dev Spacesで、開発マシンとAKS Clusterを接続して、AKS - 開発マシン間のトラフィックをリダイレクトしてあたかも同一のAKSクラスターに開発マシンのコードがあるかのように開発できるらしい。すげー。&lt;/p&gt;

&lt;p&gt;Connect your development machine to an AKS cluster (preview) &lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/connect&#34;&gt;https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/connect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github Actionと連携してプルリクエストをメインブランチにマージする前に変更点をAKSクラスタで直接テストできるらしい。&lt;/p&gt;

&lt;p&gt;GitHub Actions &amp;amp; Azure Kubernetes Service (preview)&lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/github-actions&#34;&gt;https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/github-actions&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-kubernetes-clusters-with-azure-availability-zone-cluster-autoscaler-and-multiple-node-pools&#34;&gt;3. Kubernetes clusters with Azure Availability Zone, Cluster autoscaler and multiple node pools&lt;/h3&gt;

&lt;p&gt;AKS Clusterでの可用性ゾーン構成とマルチノードプールとクラスターオートスケーラーが正式にGAしました。
正統なアップデートって感じがします。エージェントノードの構成がより柔軟になりそうです。
この構成を構築するにはAzure CLIを最新にする必要があったので注意。&lt;/p&gt;

&lt;p&gt;ドキュメントとしては、Githubの&lt;a href=&#34;https://github.com/Azure/AKS/releases/tag/2019-10-28&#34;&gt;Release 2019-10-28&lt;/a&gt;が詳しそうです。&lt;/p&gt;

&lt;h3 id=&#34;4-improved-azure-kubernetes-service-security-with-authenticated-ip&#34;&gt;4. Improved Azure Kubernetes Service security with authenticated IP&lt;/h3&gt;

&lt;p&gt;AKS上のkube-apiserverへの接続IP制限をかける機能がGAされました。
前のAzure Firewallを使用した手順から、Standard LoadBlancerと統合された機能になったみたいですね。これは嬉しい。&lt;/p&gt;

&lt;p&gt;Secure access to the API server using authorized IP address ranges in Azure Kubernetes Service&lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/api-server-authorized-ip-ranges)&#34;&gt;https://docs.microsoft.com/en-us/azure/aks/api-server-authorized-ip-ranges)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-azure-kubernetes-service-easier-diagnostics-and-logging&#34;&gt;5. Azure Kubernetes Service – easier diagnostics and logging&lt;/h3&gt;

&lt;p&gt;運用中のAKS ClusterのトラブルシューティングをおこなうAKS　Diagnosticsというプレビュー機能が発表されました。
派手な新機能に着目しがちだけどこういう実用的な機能めちゃくちゃ大事だと思う。&lt;/p&gt;

&lt;p&gt;Azure Kubernetes Service（AKS）診断の概要&lt;br&gt;
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/concepts-diagnostics&#34;&gt;https://docs.microsoft.com/en-us/azure/aks/concepts-diagnostics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AKS Clusterのノードやpodの問題を診断して、Azureのblobストレージに結果を出力するaks-periscopeというツールも紹介されています。。&lt;/p&gt;

&lt;p&gt;aks-periscope&lt;br&gt;
&lt;a href=&#34;https://github.com/Azure/aks-periscope&#34;&gt;https://github.com/Azure/aks-periscope&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;6-open-container-initiative-artifacts-support-in-azure-container-registry&#34;&gt;6. Open Container Initiative artifacts support in Azure Container Registry&lt;/h3&gt;

&lt;p&gt;Docker ImageとHelm Chartに加えて、OCI形式のアーティファクトやイメージもACRで保存できる機能が正式にGAとなりました。&lt;/p&gt;

&lt;h3 id=&#34;7-azure-security-center-vulnerability-assessments-available-for-azure-container-registry&#34;&gt;7. Azure Security Center vulnerability assessments available for Azure Container Registry&lt;/h3&gt;

&lt;p&gt;Azure Security CenterでAzure Container Registryの脆弱性評価と推奨事項もできるようになるというおはなし。&lt;/p&gt;

&lt;h3 id=&#34;8-azure-monitor-for-containers-preview-of-hybrid-monitoring-general-availability-of-prometheus-support&#34;&gt;8. Azure Monitor for containers: Preview of Hybrid Monitoring, general availability of Prometheus Support&lt;/h3&gt;

&lt;p&gt;オンプレのK8sクラスタととAzure上のAKSクラスタをAzure Monitorでハイブリッドに監視できる機能がプレビューで発表されました。
また、PrometheusからメトリックやログをAzure Monitorに取り込む機能がGAとなりました。&lt;/p&gt;

&lt;h3 id=&#34;9-on-demand-pricing-and-azure-monitor-log-analytics-integration-for-azure-red-hat-openshift&#34;&gt;9. On-demand pricing and Azure Monitor Log Analytics integration for Azure Red Hat OpenShift&lt;/h3&gt;

&lt;p&gt;以前まで Azure Redhat Openshiftをデプロイする際は、 reserved instance を事前に購入しておく必要がありましたが、今回の発表で&lt;a href=&#34;https://azure.microsoft.com/ja-jp/updates/azure-red-hat-openshift-hourly-prices/&#34;&gt;時間単位の課金&lt;/a&gt;でデプロイが可能になりました。また、Red Hat OpenShiftクラスタと Azure Monitor Log Analyticsの統合がプレビューだそうです。&lt;/p&gt;
</description>
            </item>
        
            <item>
                <title>Microsoft Ignite 2019 で発表された新機能のまとめ(VM/VMSS編)</title>
                <link>https://yonehub.y10e.com/2019/11/07/20191107_ignite2019_iaas/</link>
                <pubDate>Thu, 07 Nov 2019 17:47:23 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/11/07/20191107_ignite2019_iaas/</guid>
                <description>

&lt;p&gt;今週は Microsoft Ignite 2019 で盛り上がった一週間でした。&lt;br&gt;
自分の周りでは、Keynote で取り上げられていた、Azure Arc や Azure Synapse が特に話題になっていた気がします。
それ以外にも、新機能の発表、プレビュー機能の GA ニュースが山盛りでした。
発表された項目は、&lt;a href=&#34;https://news.microsoft.com/wp-content/uploads/prod/sites/563/2019/11/Ignite-2019-Book-of-News.pdf&#34;&gt;Book of News Microsoft Ignite 2019&lt;/a&gt;に記載がありますが、index だけで7ページもあります。
しばらくキャッチアップに注力せねば&amp;hellip;&lt;br&gt;
そんな中、Azure の IaaS 系のサービスについては最新状況をだいたい把握しているつもりでしたが、VM Scaleset(VMSS) で初めて認識した機能があったので、その機能の検証と、ついでに Ignite 2019 で触れていた VM/VMSS の機能についてまとめてみました。&lt;/p&gt;

&lt;h3 id=&#34;1-azure-da-v4-and-das-v4-virtual-machines&#34;&gt;1. Azure Da_v4 and Das_v4 virtual machines&lt;/h3&gt;

&lt;p&gt;新しい VM サイズが GA されました。AMD EPYC 7452 プロセッサを搭載した Da_v4 と Das_v4 になります。&lt;/p&gt;

&lt;h3 id=&#34;2-serial-console-for-azure-government-cloud-public-preview&#34;&gt;2. Serial Console for Azure Government Cloud public preview&lt;/h3&gt;

&lt;p&gt;Azure Government Cloud でシリアルコンソール機能がパブリックプレビューになりました。通常のパブリックな Azure だととっくに GA されているので、これは日本のユーザにはあんまり関係なさそうな気がします。&lt;/p&gt;

&lt;h3 id=&#34;3-azure-generation-2-virtual-machines-generally-available&#34;&gt;3. Azure Generation 2 virtual machines generally available&lt;/h3&gt;

&lt;p&gt;Azure 上で hyper-V 第2世代の仮想マシンが利用できる機能が GA になりました。
第2世代の仮想マシンでは、OS の boot が UEFI 形式になるため、OS ディスクを 2TB 以上にすることができます。（第一世代はレガシー BIOS だったので、OS ディスクは 2TB 以下しか使用できませんでした。データディスクは 2TB 以上使えます。）
ただし、Azure の機能で Bitlocker などを有効化する Azure Disk Encryption や, DR 対策でよく使用される Azure Site Recovery は、まだ第2世代仮想マシンには対応していないようなので今後の対応を待つ必要がありそうです。&lt;/p&gt;

&lt;p&gt;参考:
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machines/windows/generation-2&#34;&gt;Support for generation 2 VMs on Azure&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-new-features-for-azure-virtual-machine-scale-sets&#34;&gt;4. New features for Azure virtual machine scale sets&lt;/h3&gt;

&lt;p&gt;仮想マシンスケールセットでいくつかプレビューの機能が紹介されました。
ドキュメントは以下の通りです。実用的な機能が増えてきた印象です。1の Orchestration mode は知らなかった機能なので&lt;a href=&#34;../../../..//2019/11/06/20191106_vmss_orchestrationmode/&#34;&gt;別途調べて&lt;/a&gt;みました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/orchestration-modes&#34;&gt;Orchestration mode (preview)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-scale-in-policy&#34;&gt;Preview: Use custom scale-in policies with Azure virtual machine scale sets&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/shared-image-galleries&#34;&gt;Shared Image Galleries overview&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-terminate-notification&#34;&gt;Terminate notification for Azure virtual machine scale set instances (Preview)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-instance-protection&#34;&gt;Instance Protection for Azure virtual machine scale set instances (Preview)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2の scale-in policies は、スケールインする際に削除されるインスタンスを選ぶ戦略を選択できるオプションです。
3はユーザが作ったイメージをいろいろと共有できる Shared Image Galleries と VMSS の統合です。
4 Terminate notification は、スケールインの際にインスタンス削除開始までの時間を制御できるオプションです。終了処理をしてからスケールインしたい時などに有用かと思います。
5の Instance Protection は、特定のインスタンスを自動スケールなどの操作から保護できるオプションです。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-azure-hbv2-virtual-machines-coming-soon&#34;&gt;5. Azure HBv2 virtual machines coming soon&lt;/h3&gt;

&lt;p&gt;AMD EPYCが搭載されたHPC向け（RDMA使用可）の仮想マシンサイズ HBv2 の紹介です。このサイズはまだGAではないみたいです。&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&#34;https://azure.microsoft.com/ja-jp/blog/introducing-the-new-hbv2-azure-virtual-machines-for-high-performance-computing/&#34;&gt;ハイ パフォーマンス コンピューティング用の新しい HBv2 Azure 仮想マシンの概要&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;6-azure-ea-v4-and-eas-v4-series-virtual-machines&#34;&gt;6. Azure Ea v4 and Eas v4 series virtual machines&lt;/h3&gt;

&lt;p&gt;AMD EPYC 7452 が搭載された仮想マシンサイズ Ea v4/Eas v4 が GA されました。&lt;/p&gt;

&lt;h3 id=&#34;7-azure-nvv4-virtual-machine-public-preview&#34;&gt;7. Azure NVv4 virtual machine public preview&lt;/h3&gt;

&lt;p&gt;AMD EPYC 7002 プロセッサと Radeon MI25 GPU が搭載された NVv4 がパブリックプレビューになりました。&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&#34;https://azure.microsoft.com/en-us/blog/introducing-nvv4-azure-virtual-machines-for-gpu-visualization-workloads/&#34;&gt;Introducing NVv4 Azure Virtual Machines for GPU visualization workloads&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;8-azure-ndv2-virtual-machines-public-preview&#34;&gt;8. Azure NDv2 virtual machines public preview&lt;/h3&gt;

&lt;p&gt;NVIDIA Tesla V100のGPUとIntel Xeon Platinum 8168 が搭載された NDv2 がパブリックプレビューになりました。&lt;/p&gt;

&lt;h3 id=&#34;9-proximity-placement-groups-now-generally-available&#34;&gt;9. Proximity placement groups now generally available&lt;/h3&gt;

&lt;p&gt;Proximity placement groups(日本語だと近接通信配置グループ)が GA されたようです。PPGと略しているみたい。
PPG は、可用性ゾーンよりもさらにデータセンター内の物理的な距離を近づけて仮想マシンを配置できるオプションです。物理的距離が近いので、仮想マシン間の通信レイテンシが小さくなることが期待されます。&lt;/p&gt;

&lt;h3 id=&#34;10-azure-spot-virtual-machines&#34;&gt;10. Azure Spot Virtual Machines&lt;/h3&gt;

&lt;p&gt;ローコストなAzure Spot VM が VM/VMSS で 2020 年の始めくらいにプレビュー利用できるようになるらしい。ドキュメントが見当たらなかったので今後出てくると予想。&lt;/p&gt;

&lt;h3 id=&#34;11-better-performance-with-bursting-enhancement-and-smaller-size-offerings-on-azure-disks&#34;&gt;11. Better performance with bursting enhancement and smaller size offerings on Azure Disks&lt;/h3&gt;

&lt;p&gt;Premium SSD と Standard SSD で、4, 8, 16GB のオプションが追加されました。
また、Premium SSD で P20 (512　GB 以下)のディスクは、IOPS とスループット性能がバーストし、一時的に最大で30倍の性能(3500IOPS, 170MiB/s)まで引き上げることが可能なプレビュー機能が発表されました。&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machines/linux/disk-bursting&#34;&gt;Premium SSD bursting&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;12-enabling-server-side-encryption-with-customer-managed-keys-for-azure-disks&#34;&gt;12. Enabling server-side encryption with customer-managed keys for Azure Disks&lt;/h3&gt;

&lt;p&gt;Managed Disks のサーバーサイド暗号化（SSE）をKeyvault上のユーザ管理のkeyで実施できるようになるプレビュー機能が発表されました。&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&#34;https://azure.microsoft.com/ja-jp/blog/preview-server-side-encryption-with-customer-managed-keys-for-azure-managed-disks/&#34;&gt;Preview: Server-side encryption with customer-managed keys for Azure Managed Disks&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;13-optimize-data-protection-with-incremental-snapshots-and-direct-upload-on-azure-disks&#34;&gt;13. Optimize data protection with incremental snapshots and direct upload on Azure Disks&lt;/h3&gt;

&lt;p&gt;Managed Diskのスナップショットは、今まで差分コピーでなく取得時点のフルコピーでしたが、差分スナップショットがプレビュー機能で発表されました。&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&#34;https://azure.microsoft.com/en-us/blog/introducing-cost-effective-increment-snapshots-of-azure-managed-disks-in-preview/&#34;&gt;Introducing cost-effective increment snapshots of Azure managed disks in preview&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;14-azure-shared-image-gallery-now-supports-specialized-images-in-preview&#34;&gt;14. Azure Shared Image Gallery now supports specialized images in preview&lt;/h3&gt;

&lt;p&gt;Azure Shared Image Galleryで特殊化イメージをサポートする機能がプレビューとなりました。&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&#34;https://azure.microsoft.com/ja-jp/updates/shared-image-gallery-specialized-preview/&#34;&gt;Azure Shared Image Gallery now supports specialized images in preview&lt;/a&gt;&lt;/p&gt;
</description>
            </item>
        
            <item>
                <title>VM ScalesetのOrchestration Modeについて</title>
                <link>https://yonehub.y10e.com/2019/11/06/20191106_vmss_orchestrationmode/</link>
                <pubDate>Wed, 06 Nov 2019 22:47:23 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/11/06/20191106_vmss_orchestrationmode/</guid>
                <description>&lt;p&gt;Microsoft Ignite 2019で触れられていた、VM Scaleset の&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/orchestration-modes&#34;&gt;Orchestration mode&lt;/a&gt;というプレビュー機能について調べてみました。
要約すると、VM Scalesetに通常の仮想マシンを追加できる機能でした。&lt;/p&gt;

&lt;p&gt;・2種類のOrchestration(ScaleSetVM or VM)を選択できる（VMSS作成時のみ）&lt;/p&gt;

&lt;p&gt;・ScaleSetVMモードは以前のVMSS。VMSSの雛形にそったVMインスタンスをスケールさせるので、基本的に同一構成のVMインスタンスを管理する&lt;/p&gt;

&lt;p&gt;・VMモードは通常のVMをVM Scalesetに所属させることができる。そのため異なる仮想マシンサイズや構成（NICやディスク数なども含む）を混在させて管理することができる
　
なお、VMモードで、通常の仮想マシンをスケールセットに追加する場合は、仮想マシンを新規作成する時のみ可能のようです。
VMモードの追加できるのは通常の仮想マシンになるので、Azure Backup、Azure Site Recoveryなどの個別の仮想マシンにて適用可能な機能は、そのまま利用することができるようです。
最終的には、VMモードでオートスケールなども対応するのかなと思いますが、プレビューの現段階だとサポートされないようです。今の段階だと通常の仮想マシンを可用性セットで構築するのとの差があんまり感じられないので、おそらく今後は仮想マシンスケールセット特有の機能がVMモードでも使えるようになっていくのかなと予想されます。&lt;/p&gt;

&lt;p&gt;Azure Portalからだと、VMモードでScalesetを作成することはできましたが、VMをScalesetに参加させることはまだできないようでした。
調べたところAzure CLIは、2019/11/04のリリース　&lt;a href=&#34;https://github.com/MicrosoftDocs/azure-docs-cli/blob/master/docs-ref-conceptual/release-notes-azure-cli.md#november-4-2019&#34;&gt;Version 2.0.76&lt;/a&gt;から対応しているようで、現在の動作を確認するにはCLIを使用するのが勝手がよさそうです。&lt;br&gt;
こんな感じで作成することができます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1.orchestration-mode:VMのVMSSを作成&lt;/span&gt;
az vmss create -g Scaleset -n orchestrationModeVMSS --orchestration-mode VM

&lt;span class=&#34;c1&#34;&gt;# 2. orchestration-mode:VMに仮想マシンを追加※仮想マシン新規作成時のみ可能&lt;/span&gt;
az vm create &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
 -g Scaleset -n orchestrationModeVM001 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
 --vmss /subscriptions/xxxx-xxxx-xxxx-xxxx-xxxx/resourceGroups/Scaleset/providers/Microsoft.Compute/virtualMachineScaleSets/ orchestrationModeVMSS &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
 --image ubuntuLTS&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;作成したVMの定義（json）を見ると、properties.virtualMachineScaleSetが追加されているのがわかります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;   &lt;span class=&#34;s2&#34;&gt;&amp;#34;virtualMachineScaleSet&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/subscriptions/527xxxx-xxxx-xxxx-xxxx-xxxx/resourceGroups/Scaleset/providers/Microsoft.Compute/virtualMachineScaleSets/orchestrationModeVMSS&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;REST-APIはversion 2019-03-01 から対応しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/rest/api/compute/virtualmachines/createorupdate#request-body&#34;&gt;Virtual Machines - Create Or Update&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VMSSは様々な Azure サービスのベースになっているので、Orchestration modeを利用するサービスも出てくるのかもしれませんね。&lt;/p&gt;
</description>
            </item>
        
            <item>
                <title>Github pages &#43; Hugoでブログ構築</title>
                <link>https://yonehub.y10e.com/2019/10/22/20191022_hugo_githubio/</link>
                <pubDate>Tue, 22 Oct 2019 22:03:28 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/10/22/20191022_hugo_githubio/</guid>
                <description>

&lt;p&gt;クラウドのVM上でWordpressで公開していたブログをgithub pages + Hugoに移行してみた。
Hugoは静的サイトジェネレータの一つで、Go言語で作られています。MarkDown等の記述性の高い形式で書かれたファイルを指定したデザインテーマでHTML + CSSのWEBコンテンツに変換してくれます。&lt;/p&gt;

&lt;h2 id=&#34;why-github-pages&#34;&gt;Why GitHub Pages?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一の理由はコストです。クラウドとはいえ Web Server の稼働代金も1000円/月程度かかるので無料で使えるgithub pagesに移行を考えました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;カスタムドメインが使用可能。ブログのドメインは変えたくなかったのですが、github pagesはカスタムドメインに対応しています。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Httpsが無料で使える。github pagesはでLet&amp;rsquo;s EncryptのSSL証明書が自動発行されるのでカスタムドメインでhttpsが無料で使えます。&lt;a href=&#34;https://github.blog/2018-05-01-github-pages-custom-domains-https/&#34;&gt;Custom domains on GitHub Pages gain support for HTTPS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;why-hugo&#34;&gt;Why Hugo?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Themeのデザインが自分好みのものが多かった。移行に際して、python ベースのpelicanも試してみましたがHugoの方が自分好みのものが多かったので主に使用することに決めました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;記事生成が早い。pelicanと比べてもGoベースのHugoはサクサク動いてくれる感があります。ストレスフリーに作るためにも重要な要素です。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;gitHub上に必要なリポジトリを作成しておく（作業用とgithub.ioの公開用2つ必要になります）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hugoコマンドを利用してblogのコンテンツを生成する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作業用リポジトリにある/publicをgithub.io用の公開リポジトリのサブモジュールとして設定する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;リポジトリへのpushを自動化する&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-github上に必要なリポジトリを作成しておく&#34;&gt;1. GitHub上に必要なリポジトリを作成しておく&lt;/h3&gt;

&lt;p&gt;github pagesでhugoを運用していくために次の２つのリポジトリをgithub上に用意します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;github pagesとして公開するファイルを配置するリポジトリ　&lt;/li&gt;
&lt;li&gt;公開ファイルにhugoで変換する前に生コンテンツ（マークダウンなど）を配置するリポジトリ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1のリポジトリについては、github pagesの機能を使うためのgithubのご作法なので、リポジトリ名は指定の形式　username.github.io で作る必要があります。
サイトのURLはデフォルトで &lt;a href=&#34;https://username.github.io&#34;&gt;https://username.github.io&lt;/a&gt; となりますが、カスタムドメインが設定可能なので独自ドメインをつけたい場合は、リポジトリのSettings &amp;gt; Custom domainで指定できます。
2のリポジトリは元コンテンツファイル群を配置するためのリポジトリです。私はprivateリポジトリとして運用しています。
2つのリポジトリを作成したら、2つ目のリポジトリをローカルにcloneします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone https://github.com/xxx/xxx.git&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;2-hugoコマンドを利用してblogのコンテンツを生成する&#34;&gt;2. Hugoコマンドを利用してblogのコンテンツを生成する&lt;/h3&gt;

&lt;p&gt;まずはHugoを作業端末にインストールしましょう。MacであればHomebrewでインストールできます。（WindowsはChocolateyでインストールすることができるようです）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install hugo&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;インストールしたあとは、&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;HUGO - Quick Start&lt;/a&gt;に従って進めていきます。
hugo new site　SiteName でコンテンツの雛形が作成できまるので、cloneしたフォルダの直下で実行しましょう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo new site newblog
$ tree
├── archetypes
│   └── default.md
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;主に編集するフォルダは、上記の中でcontent, theme, config.tomlになると思います。中でもcontentは、公開記事の元となるmarkdownを配置するので一番ファイル作成や編集の頻度が高いと思います。&lt;/p&gt;

&lt;p&gt;blog自体の雛形が作られたので、ここからはコンテンツの作成や設定の作業です。
こだわり始めるといくらでもできるので、最低限の３つに絞って記載します。&lt;/p&gt;

&lt;p&gt;a.サイトデザイン（theme）の適用&lt;/p&gt;

&lt;p&gt;b.ブログ記事の作成&lt;/p&gt;

&lt;p&gt;c.設定ファイルの編集（config.toml）&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-サイトデザイン-theme-の適用&#34;&gt;a.サイトデザイン（theme）の適用&lt;/h3&gt;

&lt;p&gt;Hugoでは数多くのテーマが公開されています。
&lt;a href=&#34;https://themes.gohugo.io/tags/simple/&#34;&gt;Hugo Themes&lt;/a&gt;から、好みのテーマを探してきます。(Demoページなども用意されていて素晴らしい！)
テーマが決まったら上で作成したthemesディレクトリに関連ファイルをcloneしてきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; themes
git clone https://github.com/Tazeg/hugo-blog-jeffprod.git 
ls
hugo-blog-jeffprod&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;b-ブログ記事の作成&#34;&gt;b.ブログ記事の作成&lt;/h3&gt;

&lt;p&gt;一旦、config.tomlと同階層まで移動して、hugo new post/new.mdコマンドで記事の元となるファイルを作成します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo new post/new.md&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;content配下にpost/new.mdが生成されるので、このファイルをエディタで編集していきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;---
title: &lt;span class=&#34;s2&#34;&gt;&amp;#34;New&amp;#34;&lt;/span&gt;　&lt;span class=&#34;c1&#34;&gt;#タイトル&lt;/span&gt;
date: &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt;-10-22T18:40:33+09:00　&lt;span class=&#34;c1&#34;&gt;#記事の公開日時&lt;/span&gt;
draft: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;　&lt;span class=&#34;c1&#34;&gt;#下書きか否か。falseで記事として公開されます。&lt;/span&gt;
---&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;一般的に使用するいくつかの項目を足すと次のようになります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;---
title: &lt;span class=&#34;s2&#34;&gt;&amp;#34;New&amp;#34;&lt;/span&gt;
date: &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt;-10-22T18:40:33+09:00
draft: &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
categories: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Tech&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
tags: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;hugo&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
Authors: &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hoge Fuga&amp;#34;&lt;/span&gt;
---&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;本文はその下にMarkdown形式で書いていきます。この時、次のコマンドでローカルサーバを起動させておくと記事の修正が逐次反映されてブラウザで確認できるので便利です。
(-tでthemeを指定するのでテーマを試してみたいときにも便利です。)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo server -D -t hugo-blog-jeffprod&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;c-設定ファイルの編集-config-toml&#34;&gt;c.設定ファイルの編集（config.toml）&lt;/h3&gt;

&lt;p&gt;使用するテーマに寄って変わる部分があるので、テーマのページなどを参照して追記する必要があります。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nv&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://xxx.github.io//&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;languageCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ja-jp&amp;#34;&lt;/span&gt; 
&lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hugo New Blog&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;内容が固まったらhugo -t で公開ファイルを/public配下に生成します&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;hugo -t hugo-blog-jeffprod&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;3-作業用リポジトリにある-publicをgithub-io用の公開リポジトリのサブモジュールとして設定する&#34;&gt;3.作業用リポジトリにある/publicをgithub.io用の公開リポジトリのサブモジュールとして設定する&lt;/h3&gt;

&lt;p&gt;/public配下には、cssやhtmlなどの公開用ファイルが生成されますが、本来これは github pagesの公開用リポジトリに配置される必要があります。
手動作業で生成したファイルをgithub pagesの公開用リポジトリにpushしていくこともできますが、面倒すぎるので、/public配下をサブモジュールとして別のリポジトリと紐づけておきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git submodule add -b master git@github.com:UserName/UserName.github.io.git public&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;4-リポジトリへのpushを自動化する&#34;&gt;4. リポジトリへのpushを自動化する&lt;/h3&gt;

&lt;p&gt;公開ファイルを生成して、github リポジトリにpushしていくことでブログを更新することになりますが面倒なのでスクリプト化しておきます。
themeなどは環境によって変えると良いとおもいます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 公開ファイルの生成&lt;/span&gt;
hugo -t hugo-blog-jeffprod

&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public
git add .

&lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;building mysite `date`&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$msg&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# サブモジュールサイトへのPush&lt;/span&gt;
git push origin master

&lt;span class=&#34;c1&#34;&gt;#作業用リポジトリへのpush&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
git add .
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$msg&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
git push&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ./deploy.sh&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;デプロイ後に&amp;rdquo;https：//UserName.github.io/&amp;ldquo;にアクセスすると自身のサイトが確認できるはずです。&lt;/p&gt;
</description>
            </item>
        
            <item>
                <title>MacにRustをインストールしてHelloWorldするまで</title>
                <link>https://yonehub.y10e.com/2019/10/21/20191021_rust/</link>
                <pubDate>Mon, 21 Oct 2019 21:26:08 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/10/21/20191021_rust/</guid>
                <description>

&lt;p&gt;Mac OSにRustをインストールして実行するまでのメモです。&lt;/p&gt;

&lt;h3 id=&#34;手順&#34;&gt;手順&lt;/h3&gt;

&lt;p&gt;まずはターミナルで次のコマンドを実行する。（選択肢が出たら、1のdefaultで良いと思う）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl --proto &lt;span class=&#34;s1&#34;&gt;&amp;#39;=https&amp;#39;&lt;/span&gt; --tlsv1.2 -sSf https://sh.rustup.rs &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sh&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;ターミナルを再起動するか、以下のコマンドを実行してパスを通す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.bash_profile&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;インストール後はrustcのバージョンを確認する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;rustc --version
rustc &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.38.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;625451e37 &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt;-09-23&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;インストールが確認できたら適当なパスにhello.rsという名称でファイルを作り、エディタで内容を次の通りにして保存する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust:hello.rs&#34; data-lang=&#34;rust:hello.rs&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust:hello.rs&#34; data-lang=&#34;rust:hello.rs&#34;&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;rustcでコンパイルするとhelloという実行ファイルが生成される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ rustc hello.rs
$ ls
hello           hello.rs&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;実行ファイルを実行するとHello Worldと表示されるのでこれで終わり。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ./hello 
Hello World!&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;おまけ&#34;&gt;おまけ&lt;/h3&gt;

&lt;p&gt;公式のinstalationは&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;ここ&lt;/a&gt;&lt;/p&gt;
</description>
            </item>
        
            <item>
                <title>Azure SQL DatabaseとCosmosDBの要点整理(2019/7)</title>
                <link>https://yonehub.y10e.com/2019/07/07/20190707_azure_sql/</link>
                <pubDate>Sun, 07 Jul 2019 00:00:01 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/07/07/20190707_azure_sql/</guid>
                <description>

&lt;h2 id=&#34;azure-sql-database-サーバ&#34;&gt;Azure SQL Database サーバ&lt;/h2&gt;

&lt;p&gt;Azure SQL Databaseサーバは、各種機能の中央管理をおこなう論理的リソースで、以下のような管理機能を提供している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;データベースアクセス（ログイン）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Firewall Rule&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;監査規則&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;脅威検出ポリシー（SQLインジェクション、ブルートフォース攻撃など）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自動フェールオーバーグループ&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Azure SQL Databaseサーバは、Database を作成するにあたって事前に存在している必要がある。&lt;/p&gt;

&lt;h2 id=&#34;azure-sql-database&#34;&gt;Azure SQL Database&lt;/h2&gt;

&lt;p&gt;Azure SQL Databaseには、次の3つのデプロイオプションがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;単一データベース&lt;/li&gt;
&lt;li&gt;エラスティックプール&lt;/li&gt;
&lt;li&gt;マネージドインスタンス&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;単一データベース&#34;&gt;単一データベース&lt;/h3&gt;

&lt;p&gt;最も汎用性の高いオプション。プランのスケールアップやスケールインが可能で柔軟性が高い。&lt;br&gt;
Database Migration Service(DMS)を使用することで、オンプレミスSQLサーバーからの移行も可能。DACパッケージ(dacpac)を使って移行することもできるが、bacpacファイルのエクスポートやAzure SQL Databaseへのインポートも発生するためダウンタイムは長い。&lt;/p&gt;

&lt;h3 id=&#34;エラスティックプール&#34;&gt;エラスティックプール&lt;/h3&gt;

&lt;p&gt;エラスティックプールを使用することで複数のデータベースで共有されるプールのリソースを確保（購入）でき個々のデータベースの使用期間が予測しづらい場合にリソースを効率的に使用できる。エラスティックプール内のデータベースは単一のAzure SQL Database サーバ上に存在し設定されているリソースを共有している。
そのためエラスティックプールは、テナント単位で個々のDatabaseを展開したい場合などに魅力的なプランとなる。また、単一データベースはエラスティックプールの内外に移動することができる。&lt;/p&gt;

&lt;h3 id=&#34;マネージドインスタンス&#34;&gt;マネージドインスタンス&lt;/h3&gt;

&lt;p&gt;オンプレミスSQL Serverと互換性の高いデータベースが作成できるため、リフト&amp;amp;シフトのケースで最初に検討されるオプション。
仮想ネットワークにインタンスを展開できるので、プライベートIPアドレスを持つ。(VPNやExpressRouteの利用も選択肢にできる)&lt;br&gt;
既存のSQL Serverからの移行には、Azure Database Migration Service(DMS)を使用することで、オフラインおよびオンライン移行できる。
オフライン移行では、移行の開始からアプリケーションのダウンタイムが発生するが、オンライン移行では、増分的にマネージドインスタンスにプッシュするので最終的な切り替え時のみダウンタイムが発生する。ネイティブのRESTOREコマンドで移行することもできるが、バックアップファイルの取得、コピーなどで移行ダウンタイムは大きくなる。&lt;/p&gt;

&lt;h3 id=&#34;仮想コアベースとdtu-ベースの購入モデル&#34;&gt;仮想コアベースとDTU ベースの購入モデル&lt;/h3&gt;

&lt;p&gt;仮想コアベースは、ハードウェアの世代とハードウェアの物理特性 (コア数、メモリ、ストレージ サイズなど) を選択して利用するスタイル
DTU(Database Transaction Unit) は、SQL Database のデータベースの処理性能を表す単位。Microsoftがベンチマークテスト数値に基づく
CPU、メモリの使用率、およびディスクの読み書き負荷の組み合わせた測定値に基づいて算出している。このDTUに基づいて購入するモデル。
DTUベースの購入モデルは、現在マネージドインスタンスでは提供されていない。&lt;/p&gt;

&lt;!--https://www.slideshare.net/ssuser12e741/15jssugazure-sql-database --&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;azure-cosmos-db&#34;&gt;Azure Cosmos DB&lt;/h2&gt;

&lt;h3 id=&#34;概要&#34;&gt;概要&lt;/h3&gt;

&lt;p&gt;モダンアプリ向けの低レイテンシ、大規模なスケールを保証するために構築されたフルマネージドグローバル分散データベース
Cosmos DBのユースケースとして、世界中に分散されたアプリケーションや、瞬間的かつ弾力的なスケールが必要なワークロードなどに対応できる
（Cosmos DB では処理種類に応じて特定の処理待機時間を超える要求を失敗したリクエストとしてSLA対象にしている）
「グローバル分散」と「マルチモデルのデータベース」が最大の特徴で、Document、Graph、Key-Value、Column-Familyをサポートしている。
データモデルにはそれぞれ対応するAPIが存在している&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DataModel&lt;/th&gt;
&lt;th&gt;API&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Documents&lt;/td&gt;
&lt;td&gt;SQL API, MongoDB API&lt;/td&gt;
&lt;td&gt;JSON形式のドキュメントを保存できるデータモデル&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Graph&lt;/td&gt;
&lt;td&gt;Gremlin API&lt;/td&gt;
&lt;td&gt;データとデータの繋がりをグラフ構造で保持するデータモデル&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Key-Value&lt;/td&gt;
&lt;td&gt;Table API, Etcd(Preview)&lt;/td&gt;
&lt;td&gt;スキーマレスなテーブル構造でデータを保持するデータモデル&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Column-Family&lt;/td&gt;
&lt;td&gt;Cassandra API&lt;/td&gt;
&lt;td&gt;Apache Cassandraベースのデータモデル&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;移行&#34;&gt;移行&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/azure/azure-documentdb-datamigrationtool&#34;&gt;Azure Cosmos DB Data Migration Tool&lt;/a&gt;が用意されており、このツールを使ってDocumentとTableは移行が可能。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;API&lt;/th&gt;
&lt;th&gt;移行&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SQL API&lt;/td&gt;
&lt;td&gt;Data Migration Toolで提供される任意のソース オプションを使用してデータをインポートできる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Table API&lt;/td&gt;
&lt;td&gt;Data Migration Toolか、Azcopyを使用してデータをインポートできる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MongoDB API&lt;/td&gt;
&lt;td&gt;Data Migration Toolは現在対応していない。Azure Database Migration Service(DMS) を使ってローカルのMongoDBをCosmos DBに移行できる。&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/dms/tutorial-mongodb-cosmos-db?toc=/azure/cosmos-db/toc.json&#34;&gt;MongoDBの接続情報か、Azure Storage上のbsondダンプを使ってインポートできる&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Gremlin API&lt;/td&gt;
&lt;td&gt;現在移行のサポートなし&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
            </item>
        
            <item>
                <title>Azure Active Directoryの要点整理(2019/07)</title>
                <link>https://yonehub.y10e.com/2019/07/07/20190707_azure_ad/</link>
                <pubDate>Sun, 07 Jul 2019 00:00:00 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/07/07/20190707_azure_ad/</guid>
                <description>

&lt;h2 id=&#34;azure-ad-の価格プランによる機能比較&#34;&gt;Azure AD の価格プランによる機能比較&lt;/h2&gt;

&lt;p&gt;FREE, BASIC, PREMIUM P1, PREMIUM P2のプランがある。&lt;br&gt;
BASICは1ユーザあたり112円/月, PREMIUM P1は672円/月, PREMIUM P2は1008円/月&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&#34;https://azure.microsoft.com/ja-jp/pricing/details/active-directory/&#34;&gt;Azure Active Directory のプラン機能対応表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※PREMIUM P1以上が必要な主な機能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MFA(Multi-Factor Authentication)の有効化&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Azure AD Connect Health&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;条件付きアクセス&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloud App Discovery(組織で利用しているクラウドアプリケーションの利用状況の可視化)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※PREMIUM P2以上が必要な主な機能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Identity Protection&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Privileged Identity Management(PIM)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;アクセスレビュー&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;azure-ad-connect-と-connect-health&#34;&gt;Azure AD Connect と Connect Health&lt;/h2&gt;

&lt;p&gt;Azure AD Connectは、オンプレミスとクラウドのハイブリット構成に用いるツールで、Azure AD Connect Healthは、オンプレミスのIDインフラについてログを収集し、統一環境下で監視や正常性を確認することができる機能。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://yonehub.y10e.com/img/20190707_azure_Ad/arch.png&#34; align=&#34;left&#34;&gt;&lt;br clear=&#34;left&#34;&gt;&lt;/p&gt;

&lt;p&gt;Azure AD Connectを用いてオンプレ-クラウド間でのハイブリットを構成する際は適切な認証方式を選択していく。Azure ADがユーザのサインインプロセスを処理するクラウド認証と、別の信頼された認証システム（オンプレのADFSなど）にパスワード検証
プロセスを引継ぐ方式の2種類に大別できる。&lt;/p&gt;

&lt;h3 id=&#34;クラウド認証-パスワードハッシュ同期&#34;&gt;クラウド認証: パスワードハッシュ同期&lt;/h3&gt;

&lt;p&gt;オンプレミスのADとクラウドベースのAzure AD間でユーザパスワードのハッシュ値を同期する。そのため認証が実施される場所はクラウド上になる。またアカウントの状態は同期が完了するまですぐには適用されない。&lt;/p&gt;

&lt;h3 id=&#34;クラウド認証-パススルー認証&#34;&gt;クラウド認証: パススルー認証&lt;/h3&gt;

&lt;p&gt;公開鍵で暗号化したユーザIDとパスワードをキューにいれ、オンプレミスのエージェントが暗号化情報を取得・復号し、認証情報の検証をおこなう認証形式。オンプレミスにあるパスワード情報がクラウドに保存されることはないことを謳っている。&lt;/p&gt;

&lt;h3 id=&#34;フェデレーション認証&#34;&gt;フェデレーション認証&lt;/h3&gt;

&lt;p&gt;Azure ADとフェデレーションを構成したオンプレの認証基盤に認証プロセスを引き継ぐ。オンプレの認証基盤を構築する投資が必要。&lt;/p&gt;

&lt;h2 id=&#34;identity-protection&#34;&gt;Identity Protection&lt;/h2&gt;

&lt;p&gt;ユーザー ID に関連して検出された疑わしいアクションに対する自動応答を構成できる。匿名 IP アドレスからのサインインなどのリスクイベントを定義し、これに対応するイベントが発生した場合に多要素認証を要求するといったアクセスポリシーを設定することができる。&lt;/p&gt;

&lt;h2 id=&#34;azure-ad-privileged-identity-management-pim&#34;&gt;Azure AD Privileged Identity Management(PIM)&lt;/h2&gt;

&lt;p&gt;組織内のリソース(AzureAD, Azure リソース、O365などの各種 Microsoft Online Service)へのアクセス管理や監視ができるサービス&lt;/p&gt;

&lt;p&gt;主な機能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Azure ADとAzureリソースへのJIT(Just-In-Time)特権アクセスの付与&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;開始日と終了日を使用した期限付きアクセス権のリソースへの付与&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;特権ロールをアクティブ化するために承認を要求する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ロールをアクティブ化するために多要素認証を強制する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ユーザがアクティブ化された際の理由を把握する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;特権ロールがアクティブ化されたときに通知を受ける&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;継続してユーザーにロールが必要であることを確認するためにアクセスレビューを実施する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;社内監査または外部監査に使用する監査履歴をダウンロードする&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※Azure AD Premium P2のライセンスが必要&lt;br&gt;
※アカウント管理者、サービス管理者、共同管理者などの従来のサブスクリプション管理者ロールは扱えない&lt;br&gt;
※アクセスレビューでは、定期的に設定したレビューへレビューをトリガーし、レビューが拒否されたユーザのアクセスを自動的に削除することも可能&lt;br&gt;&lt;/p&gt;

&lt;p&gt;参考:
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/active-directory/privileged-identity-management/pim-configure&#34;&gt;Azure AD Privileged Identity Management&lt;/a&gt;&lt;/p&gt;
</description>
            </item>
        
            <item>
                <title>Visual Studio CodeでMarkdownファイルをプレビューする</title>
                <link>https://yonehub.y10e.com/2019/06/16/20190616_vscode_markdown/</link>
                <pubDate>Sun, 16 Jun 2019 22:47:23 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/06/16/20190616_vscode_markdown/</guid>
                <description>

&lt;p&gt;Visual Stadio CodeでMarkdownファイルを記載している時に、リアルタイムにプレビュー表示をする方法についてのメモです。&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;View &amp;gt; Command Paletteを開く（Macだとshift + command + p）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Markdown:Open Preview to the Side&amp;rdquo;を選択する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この通り&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://yonehub.y10e.com/img/20190616_vscode_markdown/result.png&#34; align=&#34;left&#34;&gt;&lt;br clear=&#34;left&#34;&gt;&lt;/p&gt;
</description>
            </item>
        
            <item>
                <title>NTLM認証の覚え書き</title>
                <link>https://yonehub.y10e.com/2019/06/16/20190616_ntlm/</link>
                <pubDate>Sun, 16 Jun 2019 22:03:28 +0900</pubDate>
                
                <guid>https://yonehub.y10e.com/2019/06/16/20190616_ntlm/</guid>
                <description>&lt;p&gt;Windows環境では、NTLM（NT LAN Manager）とKerberosの２つの認証プロトコルが主に利用される。
Windows 2000以降はKerberos認証が推奨になっているが、未だによく見るNTLM認証の動きを整理する&lt;/p&gt;

&lt;p&gt;NTLMはいわゆるチャレンジ、レスポンス方式で、チャレンジといわれるランダムデータを元にパスワード値を組み合わせて計算し、クライアント側とサーバ側でその比較をおこなうことで認証要求の正当性を判断する。&lt;/p&gt;

&lt;p&gt;NTLM　Flow
&lt;img src=&#34;https://yonehub.y10e.com/img/20190616_ntlm/NTLM_Flow.png&#34; alt=&#34;NTLM Flow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;1.クライアントからサーバ側へ認証をリクエストする&lt;/p&gt;

&lt;p&gt;2.認証リクエストを受けてチャレンジデータを生成、クライアントに送信する&lt;/p&gt;

&lt;p&gt;3.入力したパスワードとサーバから受けたチャレンジデータを掛け合わせてレスポンスを生成し、サーバ側に送信する&lt;/p&gt;

&lt;p&gt;4.一方、サーバ側でも生成したチャレンジデータと保存されたパスワードからレンスポンスを計算しておく&lt;/p&gt;

&lt;p&gt;5.サーバ側で計算したレスポンスと、クライアントから送付されたレスポンスを比較する&lt;/p&gt;

&lt;p&gt;6.5が一致している場合、認証の許可をクライアントに応答する&lt;/p&gt;

&lt;p&gt;7.ログオンを実行する&lt;/p&gt;

&lt;p&gt;なお、サーバサイドでNTLM認証でログインしたかどうかは、Windows EventのSecurity Logで判断できる。
&lt;img src=&#34;https://yonehub.y10e.com/img/20190616_ntlm/NTLM.png&#34; alt=&#34;EventLog&#34; /&gt;&lt;/p&gt;
</description>
            </item>
        
    </channel>
</rss>
